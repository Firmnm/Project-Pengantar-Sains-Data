# -*- coding: utf-8 -*-
"""Mobile Price

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YSoOGBqstaUkdQaj3f9p-6y7miDPxBAl

**Import Library Python**
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

"""**Import Data**"""

df = pd.read_csv("train.csv")

"""**Preprocessing Data**"""

df.shape

df.info()

df.describe()

df.isnull().sum()

"""**Menghitung Frekuensi Relatif Kelas**"""

df['price_range'].value_counts(normalize= True).plot(kind = 'bar')
plt.xlabel("Price Range classes")
plt.ylabel("Frequency")
plt.title("Classes balance");

"""0(low cost), 1(medium cost), 2(high cost) and 3(very high cost)

**Melihat korelasi kolom "Ram & Battery Power" di kolom "Price Range".**
"""

sns.boxplot(x='price_range' , y='ram' , data=df)
plt.xlabel("Price Range classes")
plt.ylabel("Ram")
plt.title("Distribution of Ram Ratio, by Class");

sns.boxplot(x='price_range' , y='battery_power' , data=df)
plt.xlabel("Price Range classes")
plt.ylabel("Battery Power")
plt.title("Distribution of Battery Power Ratio, by Class");

"""**Pemodelan Data Menggunakan Random Forest**"""

# Pisahkan variabel target dan variabel independen
X = df.drop('price_range', axis=1)
y = df['price_range']

# Bagi dataset menjadi set pelatihan dan set pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Inisialisasi model Random Forest
model = RandomForestClassifier(random_state=42)

# Pelatihan model
model.fit(X_train, y_train)

# Prediksi kelas harga pada set pengujian
y_pred = model.predict(X_test)

# Evaluasi kinerja model
print("Matrix Konfusi:\n", confusion_matrix(y_test, y_pred))
print("\nLaporan Klasifikasi:\n", classification_report(y_test, y_pred))

# Visualisasi feature importance
feature_importance = model.feature_importances_
features = X.columns
feature_importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importance})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df, palette='viridis')
plt.title('Feature Importance dari Model Random Forest')
plt.xlabel('Importance')
plt.ylabel('Fitur')
plt.show()

"""**Implementasi Model Regresi Multiple Linear**"""

# Pisahkan variabel target dan variabel independen
X = df.drop('price_range', axis=1)
y = df['price_range']

# Bagi dataset menjadi set pelatihan dan set pengujian
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

# Inisialisasi dan pelatihan model regresi linear berganda
model = LinearRegression()
model.fit(X_train, y_train)

# Prediksi dengan set pengujian
y_pred = model.predict(X_test)

# Evaluasi kinerja model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Visualisasi hasil
plt.figure(figsize=(12, 6))

# Visualisasi prediksi vs nilai sebenarnya pada set pengujian
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred)
plt.title('Prediksi vs Nilai Sebenarnya')
plt.xlabel('Nilai Sebenarnya')
plt.ylabel('Prediksi')

# Visualisasi residu (selisih antara nilai sebenarnya dan prediksi)
residuals = y_test - y_pred
plt.subplot(1, 2, 2)
sns.histplot(residuals, kde=True)
plt.title('Distribusi Error')
plt.xlabel('Error')
plt.ylabel('Frekuensi')

plt.tight_layout()
plt.show()

# Laporan kinerja model
print("Mean Squared Error (MSE):", mse)
print("R-squared (R2):", r2)

"""**Kesimpulan**:

* Model regresi linear yang telah dibangun memberikan prediksi harga yang sangat baik berdasarkan fitur-fitur yang digunakan.
* Mean Squared Error yang rendah menunjukkan tingkat kesalahan prediksi yang rendah, artinya model secara akurat memperkirakan harga untuk sebagian besar data pengujian.
* R-squared yang tinggi (92.16%) menunjukkan bahwa model cukup baik dalam menjelaskan variasi harga, sehingga dapat dianggap sebagai model yang cocok untuk dataset ini.
* Model ini dapat menjadi pilihan yang baik untuk prediksi harga perangkat
mobile berdasarkan fitur-fitur yang telah digunakan dalam model.
"""